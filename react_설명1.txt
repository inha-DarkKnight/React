------------------------------------------------------------------------------------------------감시항목등록절차

로그인넘기고 search 페이지 -> 감시이름포함 모든값을 넣었을경우
search 컴포넌트에서 handlesearch()에서 monitorName, airline, destination, departure, date를 WAS에 넘김
-> WAS에서 감시로 등록할 목록인 flightData를 result로 가져옴

flightData는
  interface FlightData {
    stopover?: Stopover[];
  }

interface Stopover {
  airline: string;
  flightNumber: string;
  departureDate: Date;
  destinationDate: Date;
  price: number;
  departure: string;
  destination: string;
  link: string;
  isSoldOut: boolean;
}
  


으로 이루어져있음. // Search 컴포넌트의 샘플데이터를 참조

List컴포넌트에 감시이름과 flightData 객체를 넘김
List컴포넌트에서 감시목록중 등록버튼을 누르면 handleRegisterMonitoring에서 /monitoring/register을 통해 WAS로 
title(감시이름), flightData, email(임시, example@example.com)을 보냄 WAS에서 감시항목 등록시도함.
등록이 성공 response.ok(응답코드 200-299)이면 등록이 성공되었다고 alert를 보냄

------------------------------------------------------------------------------------------------등록절차완료

------------------------------------------------------------------------------------------------감시중인 항목및 조회 삭제

처음 클라이언트에서 상단 사람모양의 아이콘을 클릭함 -> Mypage/MonitorPage 컴포넌트를 불러옴
MonitorItem"배열"을 불러옴 // 감시중인 항목이 여러개이기때문

MonitorItem는
interface MonitorItem {
    title: string;
    request_id: string;
    airline: string;
    departure: string;
    destination: string;
    departureDate: Date;
}
으로 이루어져있음. // MonitorPage 컴포넌트의 샘플데이터를 참조

/Monitoring/list 에서 get 요청을 통해 정보를 가져오고 setData를 통해 data에 MonitorItem 배열을 넣고 Monitor 컴포넌트를 불러옴
-> 불러온 데이터를 바탕으로 Monitor컴포넌트에서 데이터를 렌더링함
Monitor 컴포넌트에서 /monitoring/delete/${request_id} 를통해 WAS에 delete요청함. (method:delete)

------------------------------------------------------------------------------------------------ 감시중 항목및 조회및 삭제 완료

------------------------------------------------------------------------------------------------ 감시항목 발견조회

처음 클라이언트에서 상단 느낌표모양의 아이콘을 클릭함 -> Main/SearchList 컴포넌트를 불러옴
/spiderbot/list 에서 get요청을 통해 FlightData"배열"을 가져옴 //감시항목 등록한게 여러개일수 있기때문.

FlightData는 마찬가지로
interface FlightData {
  title: string;
  request_id: string;
  stopover: Stopover[];
}

export interface Stopover {
  flightNumber: string;
  departure: string;
  destination: string;
  departureDate: Date;
  destinationDate: Date;
  price: number;
  isSoldOut: false
  link: string;
  airline: string;
}

이런형태로, title데이터와 request_id만 추가된형태임.
객체를 가져왔으면 Result 컴포넌트를 불러와 적절히 렌더링함. -> 만약 isSoldOut이 true면 해당 컴포넌트는 보이지않게함.
만약 flightData가 비었거나 모든 flightData의 isSoldOut이 true이면 Err_comp를 렌더링해서보여줌

------------------------------------------------------------------------------------------------ 감시항목 발견조회 완료